1. Checkout CMSSW:

	cmsrel CMSSW_10_2_5_patch1

	cd CMSSW_10_2_5_patch1/src

	cmsenv

2. get producer code:

	git clone git@github.com:cms-mual/Producers.git

	scram b -j8

	cd Producers/SingleMuonGun/test/

3. run cmsDriver command:

	cmsDriver.py SingleMuPt10_pythia8_cfi  --conditions 102X_postLS2_design_v7 -n 10 --era Run3 -s GEN,SIM,DIGI:pdigi_valid,L1,DIGI2RAW,RAW2DIGI,L1Reco,RECO --datatier GEN-SIM-RECO --beamspot GaussSigmaZ4cm --geometry Extended2019


It works! Ok, now lets get our custom single muon gun working. 

4. Remember to checkout most recent branch and create a new branch:

	git checkout origin/CMSSW_10_0_X

	git checkout -b GEM_CMSSW_10_2_X

	git add GEM_notes.txt
	git commit -m "adding notes of my work"

	git push origin GEM_CMSSW_10_2_X

Ok, now we're cooking. Let's integrate our custom muon gun in:

5. replace this with that:

	process.generator = cms.EDFilter("Pythia8PtGun",
	    PGunParameters = cms.PSet(
	        AddAntiParticle = cms.bool(True),
	        MaxEta = cms.double(2.5),
	        MaxPhi = cms.double(3.14159265359),
	        MaxPt = cms.double(10.01),
	        MinEta = cms.double(-2.5),
	        MinPhi = cms.double(-3.14159265359),
	        MinPt = cms.double(9.99),
	        ParticleID = cms.vint32(-13)
	    ),
	    PythiaParameters = cms.PSet(
	        parameterSets = cms.vstring()
	    ),
	    Verbosity = cms.untracked.int32(0),
	    firstRun = cms.untracked.uint32(1),
	    psethack = cms.string('single mu pt 10')
	)



	process.generator = cms.EDProducer("SingleMuonGun",
	  Verbosity = cms.untracked.int32(00),  # 1  - print begin and end of event
	                                       # 10 - print type of gun (constant or spectrum)
	                                       # 20 - print muon parameters (q, pt, eta, phi)
	                                       # 30 - print CMSSW event info
	  # IMPORTANT! *****************************************************************
	  ConstPt_eq_MinPt = cms.bool(False), # if TRUE  then generate muons with CONSTANT pT = MinPt
	                                      # if FALSE then generate muons with pT spectrum of muons as in 2012 data (hardcoded in SingleMuonGun/plugins/SingleMuonGun.cc)
	  # ****************************************************************************
	  MinPt  = cms.double(1000.0),
	  MaxPt  = cms.double(200.0),
	  MinEta = cms.double(-2.5),
	  MaxEta = cms.double(2.5),
	  MinPhi = cms.double(-3.14159265359),
	  MaxPhi = cms.double(3.14159265359)
	)


It works!


What eta range do we need?

http://cds.cern.ch/record/2628277/files/Images_cms_upg_o_g_b_ni_gem_re1_me0_grid_160229_mod.png

Based on that, looks like 1.5 to 2.5. However, we need to expand the range just a bit since muons scatter and bend. Lets do 1.4 to 2.6


6. So we change our config:

	process.generator = cms.EDProducer("SingleMuonGun",
	  Verbosity = cms.untracked.int32(20),  # 1  - print begin and end of event
	                                       # 10 - print type of gun (constant or spectrum)
	                                       # 20 - print muon parameters (q, pt, eta, phi)
	                                       # 30 - print CMSSW event info
	  # IMPORTANT! *****************************************************************
	  ConstPt_eq_MinPt = cms.bool(False), # if TRUE  then generate muons with CONSTANT pT = MinPt
	                                      # if FALSE then generate muons with pT spectrum of muons as in 2012 data (hardcoded in SingleMuonGun/plugins/SingleMuonGun.cc)
	  # ****************************************************************************
	  MinPt  = cms.double(1000.0),
	  MaxPt  = cms.double(200.0),
	  MinEta = cms.double(1.4),
	  MaxEta = cms.double(2.6),
	  MinPhi = cms.double(-3.14159265359),
	  MaxPhi = cms.double(3.14159265359)
	)


We get this result:

Begin processing the 1st record. Run 1, Event 1, LumiSection 1 on stream 0 at 11-Dec-2018 22:01:51.649 CET
 SingleMuonGunProducer : Begin New Event Generation
 SingleMuonGunProducer : Gun with simulated 13TeV (Run2)
 SingleMuonGunProducer : muon ID = -13 q = 1 pT = 37.8009 eta = 0.762708 phi = -1.53704
 SingleMuonGunProducer : Event Generation Done
... 

 Eta is not working based on that range. Lets look in ../plugins/SingleMuonGun.cc and find out why. 


 Line 210 shows the issue:

    f2->GetRandom2(pt,eta);
    if (muon_eta_sign_double < 0) eta *= -1;

 f2 is overidding our custom eta range. 

7. So lets comment that out and see what happens. Be sure to compile again. 

Now doing CMS run it seems to be working! We already have a line to flip the sign randomly, so we don't need to worry about -eta. 

Lets make sure the GEM collection is actually there:

8. Lets make sure the GEM collection is actually there:

	root -l SingleMuPt10_pythia8_cfi_GEN_SIM_DIGI_L1_DIGI2RAW_RAW2DIGI_L1Reco_RECO.root

	.ls

	Events->Print()


Looks like it:

*............................................................................*
*Branch  :GEMDetIdGEMRecHitsOwnedRangeMap_gemRecHits__RECO.                  *
*Entries :       10 : BranchElement (see below)                              *
*............................................................................*
*Br  382 :GEMDetIdGEMRecHitsOwnedRangeMap_gemRecHits__RECO.present : Bool_t  *
*Entries :       10 : Total  Size=        828 bytes  File Size  =        135 *
*Baskets :        1 : Basket Size=      16384 bytes  Compression=   1.00     *
*............................................................................*
*Br  383 :GEMDetIdGEMRecHitsOwnedRangeMap_gemRecHits__RECO.obj : edm:        *
*         | :RangeMap<GEMDetId,edm::OwnVector<GEMRecHit,edm:                 *
*         | :ClonePolicy<GEMRecHit> >,edm::ClonePolicy<GEMRecHit> >          *
*Entries :       10 : Total  Size=       1166 bytes  File Size  =        197 *
*Baskets :        1 : Basket Size=      16384 bytes  Compression=   2.48     *
*............................................................................*
*Branch  :GEMDetIdGEMSegmentsOwnedRangeMap_gemSegments__RECO.                *
*Entries :       10 : BranchElement (see below)                              *
*............................................................................*
*Br  384 :GEMDetIdGEMSegmentsOwnedRangeMap_gemSegments__RECO.present : Bool_t*
*Entries :       10 : Total  Size=        838 bytes  File Size  =        137 *
*Baskets :        1 : Basket Size=      16384 bytes  Compression=   1.00     *
*............................................................................*
*Br  385 :GEMDetIdGEMSegmentsOwnedRangeMap_gemSegments__RECO.obj : edm:      *
*         | :RangeMap<GEMDetId,edm::OwnVector<GEMSegment,edm:                *
*         | :ClonePolicy<GEMSegment> >,edm::ClonePolicy<GEMSegment> >        *
*Entries :       10 : Total  Size=       1176 bytes  File Size  =        198 *
*Baskets :        1 : Basket Size=      16384 bytes  Compression=   2.48     *
*............................................................................*








Luca's email:

Dear All,

You are in this email because you are interested in the alignment of the GEM detector. We (individually) already discussed about few ideas to start this task.
Let me suggest here an action list for the next week:

1) Produce Single Muon GUN.
RELASE: CMSSW_10_2_5_patch1
You get it by:
	export SCRAM_ARCH=slc6_amd64_gcc700
	cmsrel CMSSW_10_2_5_patch1
The cmsDriver command to create the cfg file from 

SingleMuPt10_pythia8_cfi.py is:
	cmsDriver.py SingleMuPt10_pythia8_cfi  --conditions 102X_postLS2_design_v7 -n 10 --era Run3 -s GEN,SIM,DIGI:pdigi_valid,L1,DIGI2RAW,RAW2DIGI,L1Reco,RECO --datatier GEN-SIM-RECO --beamspot GaussSigmaZ4cm --geometry Extended2019  
@Mohit + Adrian + Ryan could you start a MC generation? Please hack the file in order to generate muons only around a specific GEM chamber (Ryan is an expert on this).

2) We have a code that can produce residual and distributions. It is a code from Tao.
@Mohit could you prepare some slides where you summarize how to run the code and what is does?
In my opinion it would be nice to:
. Run the code and see residual and distributions on:
	Ideal MC (simply run the cmsDriver command I gave you).
	Data (as soon we have a good RUN)
	Misaligned MC. Run the cmsDriver command I gave you, after intorducing a misalignment in one coordinate. Unfortunately this is not straightforward, since we should create a GEMAlignmentRcd class and update a GEM geometry builder to consume it. We can copy what is done for DT [1]. But this could take a bit. We can come out with simpler way to introduce a smearing.
. Document all these studies in an document (DN or git twiki)

3) We need a response about the question: 'are strips on GEM really radial'? We are investigating on a separate email thread 'CAD file for GEM'.
While we keep investigating, I want to point you on [2]. In slide 6 you see a single strip from 3 VFAT using on the left the electronic map with inverse ordering, and on the right with correct ordering. This is probably not answering our question, but it is still quite interesting to see.

4) For the rookies: please feel free to ask around about any command/technicalities you are not familiar with.

Cheers,
Luca

[1] https://cmssdt.cern.ch/lxr/source/Geometry/DTGeometryBuilder/plugins/DTGeometryESModule.cc#0073
[2] https://indico.cern.ch/event/760356/#2-gem-emap